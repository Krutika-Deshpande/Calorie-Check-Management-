/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerWorkArea;

import business.Customer.Customer;
import business.Ecosystem;
import business.Market.ManufacturedProduct;
import business.Market.MasterOrderList;
import business.Market.Order;
import business.Market.OrderItem;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author kruts
 */
public class CustomerBuyProductJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerBuyProductJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Ecosystem system;
    private Customer customer;
    private Order order;
    private MasterOrderList orderList;
    private UserAccount userAccount;
    private boolean isCheckedOut = false;

    private int CalorieCount = 0;
    private int CalorieCount1 = 0;

    public CustomerBuyProductJPanel(JPanel userProcessContainer, MasterOrderList orderList, UserAccount userAccount, Customer customer, Ecosystem system, Organization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.orderList = orderList;
        this.organization = organization;
        this.userAccount = userAccount;
        this.customer = customer;
        this.system = system;

        populateCombo();
        if (!isCheckedOut);
        order = new Order();
        populateTable();
        caloriesTxt.setText(String.valueOf(customer.getCalories()));
    }

    private void populateCombo() {
        jProductCategoryComboBox.removeAllItems();
        for (ManufacturedProduct.CategoryType type : ManufacturedProduct.CategoryType.values()) {
            jProductCategoryComboBox.addItem(type);
        }

    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);
        ManufacturedProduct.CategoryType type = (ManufacturedProduct.CategoryType) jProductCategoryComboBox.getSelectedItem();
        for (ManufacturedProduct product : system.getManufacturedProductDirectory().getManufacturedProductDirectory()) {
            if (product.getCategory() == type) {
                Object row[] = new Object[5];
                row[0] = product;
                row[1] = product.getProductID();
                row[2] = product.getTotalCalories();
                row[3] = product.getPrice();
                row[4] = product.getQuantity();

                model.addRow(row);
            }
        }

    }

    public void refreshOrderTable() {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0);
        for (OrderItem oi : order.getOrderItemList()) {
            Object row[] = new Object[4];
            row[0] = oi.getProduct();
            row[1] = oi.getProduct().getTotalCalories() * oi.getQuantity();
            row[2] = oi.getQuantity();
            row[3] = oi.getQuantity() * oi.getProduct().getPrice();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jProductCategoryComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        caloriesTxt = new javax.swing.JTextField();
        quantitySpinner = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 255, 204));

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Calories", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Product Catalog");

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        viewProdjButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });

        addtoCartButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Item in cart");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "calories", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        btnViewOrderItem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });

        btnModifyQuantity.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Product Category:");

        jProductCategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jProductCategoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jProductCategoryComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Calories Required");

        caloriesTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caloriesTxtActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("View Reports");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(viewProdjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(64, 64, 64)
                                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(addtoCartButton6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jProductCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(82, 82, 82)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(caloriesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(236, 236, 236))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewOrderItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(btnModifyQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCheckOut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveOrderItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel7)))
                .addContainerGap(171, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 221, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 1107, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jProductCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(caloriesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewProdjButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addtoCartButton6)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModifyQuantity)
                            .addComponent(btnCheckOut)
                            .addComponent(btnRemoveOrderItem)
                            .addComponent(btnViewOrderItem)
                            .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(138, 138, 138))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 625, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        int row = productTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        ManufacturedProduct product = (ManufacturedProduct) productTable.getValueAt(row, 0);
        ViewProductDetailJPanel vpdjp = new ViewProductDetailJPanel(userProcessContainer, product);
        userProcessContainer.add("ViewProductDetailJPanel", vpdjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        ManufacturedProduct selectProduct = (ManufacturedProduct) productTable.getValueAt(selectedRow, 0);
        int fetchQty = (Integer) quantitySpinner.getValue();
        if (fetchQty <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be less than zero", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (fetchQty <= selectProduct.getQuantity()) {
            boolean alreadyPresent = false;
            for (OrderItem oi : order.getOrderItemList()) {
                if (oi.getProduct() == selectProduct) {
                    int oldAvail = selectProduct.getQuantity();
                    int newAvail = oldAvail - fetchQty;
                    selectProduct.setQuantity(newAvail);
                    oi.setQuantity(fetchQty + oi.getQuantity());
                    alreadyPresent = true;
                    populateTable();
                    refreshOrderTable();
                    break;
                }
            }
            if (!alreadyPresent) {
                int oldAvail = selectProduct.getQuantity();
                int newAvail = oldAvail - fetchQty;
                selectProduct.setQuantity(newAvail);
                order.addOrderItem(selectProduct, fetchQty);
                populateTable();
                refreshOrderTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Quantity is greater than  availability", "Warning", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        OrderItem oi = (OrderItem) orderTable.getValueAt(row, 0);

        ViewItemOrderDetail voidj = new ViewItemOrderDetail(userProcessContainer, oi);
        userProcessContainer.add("ViewProductDetailJPanel", voidj);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        OrderItem oi = (OrderItem) orderTable.getValueAt(selectedRow, 0);
        int currentAvail = oi.getProduct().getQuantity();
        int oldQty = oi.getQuantity();
        int newQty = Integer.parseInt(txtNewQuantity.getText());
        if (newQty > (currentAvail + oldQty)) {
            JOptionPane.showMessageDialog(null, "Quantity is greater than availability");
            return;
        } else {
            if (newQty < 0) {
                JOptionPane.showMessageDialog(null, "Quantity should be greater than zero");
                return;
            }
            oi.setQuantity(newQty);
            oi.getProduct().setQuantity(currentAvail + (oldQty - newQty));
            refreshOrderTable();
            populateTable();
        }

    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        OrderItem oi = (OrderItem) orderTable.getValueAt(row, 0);
        int oldAvail = oi.getProduct().getQuantity();
        int oldQty = oi.getQuantity();
        int newQty = oldAvail + oldAvail;
        oi.getProduct().setQuantity(newQty);
        order.removeOrderItem(oi);
        JOptionPane.showMessageDialog(null, "Order Item removed from the cart");
        refreshOrderTable();
        populateTable();

    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        try {
            double calories = customer.getCalories();

            double sum = 0;
            for (int i = 0; i < orderTable.getRowCount(); i++) {
                sum = sum + Double.parseDouble(orderTable.getValueAt(i, 1).toString());

            }

            if (sum > calories) {
                int dialogResult = JOptionPane.YES_NO_OPTION;
                JOptionPane.showConfirmDialog(null, "You have selected products with calories more than the calories you need. Do you still want to buy?", "Warning", dialogResult);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    if (order.getOrderItemList().size() > 0) {
                        orderList.addOrder(order);
                        JOptionPane.showMessageDialog(null, "Order placed successfully");
                        order = new Order();
                        refreshOrderTable();
                        populateTable();
                        customer.setCalorieConscious(true);

                    }
                } else if (dialogResult == JOptionPane.NO_OPTION) {
//                    if (order.getOrderItemList().size() > 0) {
//                        orderList.addOrder(order);
//                        JOptionPane.showMessageDialog(null, "Modi");
//                        order = new Order();
//                        refreshOrderTable();
//                        populateTable();
                
                        customer.setCalorieConscious(false);

                    

                }

            } else if(sum < calories){

                JOptionPane.showMessageDialog(null, "Calories in selected Product are less than the calories you need");
                if (order.getOrderItemList().size() > 0) {
                    orderList.addOrder(order);
                    JOptionPane.showMessageDialog(null, "Order placed successfully");
                    order = new Order();
                    refreshOrderTable();
                    populateTable();
                    isCheckedOut = false;

                }
            }

        }
    
    catch (NumberFormatException e){}

    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void jProductCategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jProductCategoryComboBoxActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_jProductCategoryComboBoxActionPerformed

    private void caloriesTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caloriesTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caloriesTxtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        DefaultPieDataset pieDataSet= new DefaultPieDataset();
        for(Customer customer : organization.getCustomerDirectory().getCustomerList()){
            if(customer.isCalorieConscious() == true){
               
                CalorieCount++;
            }
            else if(customer.isCalorieConscious() == false){
                CalorieCount1++;
            }
        }
            //barChart.setValue(, "Calories", "20-30");
            pieDataSet.setValue( "Not Calorie Conscious", CalorieCount);
            pieDataSet.setValue( "Calorie Conscious",CalorieCount1);
           
            JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataSet,true,true, true);
            PiePlot P = (PiePlot)chart.getPlot();
            
            ChartFrame chartFrame = new ChartFrame("Pie Chart", chart);
            chartFrame.setVisible(true);
            chartFrame.setSize(400,500);
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JTextField caloriesTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox jProductCategoryComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
